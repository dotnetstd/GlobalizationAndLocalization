<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="&lt;a href=&quot;{0}&quot;&gt;Gulp&lt;/a&gt;&#xD;&#xA;and&#xD;&#xA;&lt;a href=&quot;{1}&quot;&gt;Bower&lt;/a&gt; for&#xD;&#xA;managing client-side libraries" xml:space="preserve">
    <value>&lt;a href="{0}"&gt;Gulp&lt;/a&gt;
og
&lt;a href="{1}"&gt;Bower&lt;/a&gt; for
å behandle klient-side biblioteker</value>
  </data>
  <data name="Add a Controller and View" xml:space="preserve">
    <value>Legge til en kontroller og visning</value>
  </data>
  <data name="Add an appsetting in config and access it in app." xml:space="preserve">
    <value>Legge til en appsetting i konfigurasjonen og få tilgang til den i appen.</value>
  </data>
  <data name="Add client packages using Bower." xml:space="preserve">
    <value>Legg til klient pakker ved hjelp av Bower.</value>
  </data>
  <data name="Add packages using NuGet." xml:space="preserve">
    <value>Legg til pakker ved hjelp av NuGet.</value>
  </data>
  <data name="Application uses" xml:space="preserve">
    <value>Programbruk</value>
  </data>
  <data name="Bring in libraries from NuGet, Bower, and npm, and automate tasks using Grunt or Gulp." xml:space="preserve">
    <value>Bring inn biblioteker fra NuGet, Bower, og npm, og automatiser oppgaver ved hjelp av Grunt eller Gulp.</value>
  </data>
  <data name="Client side development" xml:space="preserve">
    <value>Utvikling på klientsiden</value>
  </data>
  <data name="Conceptual overview of what is ASP.NET Core" xml:space="preserve">
    <value>Konseptuell oversikt over hv som er ASP.NET Core</value>
  </data>
  <data name="Develop on different platforms" xml:space="preserve">
    <value>Utvikling på forskjellige plattformer</value>
  </data>
  <data name="Fundamentals of ASP.NET Core such as Startup and middleware." xml:space="preserve">
    <value>Grunnleggende for ASP.NET Core som Oppstart og mellomvare.</value>
  </data>
  <data name="How to" xml:space="preserve">
    <value>Hvordan</value>
  </data>
  <data name="Learn how Microsoft's Azure cloud platform allows you to build, deploy, and scale web apps." xml:space="preserve">
    <value>Lær hvordan Microsofts Azure cloud plattform lar deg bygge, distribuere og skalere webprogrammer.</value>
  </data>
  <data name="Learn how to build ASP.NET apps that can run anywhere." xml:space="preserve">
    <value>Lær å bygge ASP.NET applikasjoner som kan kjøres overalt</value>
  </data>
  <data name="Learn More" xml:space="preserve">
    <value>Lær mer</value>
  </data>
  <data name="Manage User Secrets using Secret Manager." xml:space="preserve">
    <value>Administrer bruker hemmeligheter ved hjelp av hemmelig manager.</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Neste</value>
  </data>
  <data name="Overview" xml:space="preserve">
    <value>Oversikt</value>
  </data>
  <data name="Package Management" xml:space="preserve">
    <value>Pakkebehandling</value>
  </data>
  <data name="Previous" xml:space="preserve">
    <value>Forrige</value>
  </data>
  <data name="Publish to Microsoft Azure Web Apps" xml:space="preserve">
    <value>Publiser til Microsoft Azure Web Applikasjoner</value>
  </data>
  <data name="Read more on the documentation site" xml:space="preserve">
    <value>Les mer på doumentasjons nettstedet</value>
  </data>
  <data name="Run &amp; Deploy" xml:space="preserve">
    <value>Run &amp; Distribuer</value>
  </data>
  <data name="Run tools such as EF migrations and more" xml:space="preserve">
    <value>Kjør verktøy som EF migrations og mer</value>
  </data>
  <data name="Run your app" xml:space="preserve">
    <value>Kjør din applikasjon</value>
  </data>
  <data name="Sample pages using ASP.NET Core MVC" xml:space="preserve">
    <value>Eksempel på sider ved hjelp av ASP.NET Core MVC</value>
  </data>
  <data name="Security" xml:space="preserve">
    <value>Sikkerhet</value>
  </data>
  <data name="Target development, staging or production environment." xml:space="preserve">
    <value>Målrett mot utvikling, oppsetts- eller produksjonsmiljø.</value>
  </data>
  <data name="There are powerful new features in Visual Studio for building modern web apps." xml:space="preserve">
    <value>Det er kraftige nye funksjoner i Visual Studio for å bygge moderne webprogrammer</value>
  </data>
  <data name="Use logging to log a message." xml:space="preserve">
    <value>Bruk loggføring for å logge en melding.</value>
  </data>
  <data name="Working with Data" xml:space="preserve">
    <value>Arbeide med Data</value>
  </data>
</root>